{"version":3,"sources":["store/actionTypes.js","store/reducer.js","store/rootEpics.js","store/actions.js","store/index.js","services/simply-counter.js","app/UserCount.js","App.js","services/user-count.js","hubs/_base.js","hubs/user-count.js","hubs/index.js","hubs/simply-counter.js","index.js","services/index.js"],"names":["USER_COUNT_CHANGED","COUNTING","initialState","userCount","counter","rootReducer","state","type","payload","combineEpics","userCountChanged","count","epicMiddleware","createEpicMiddleware","store","getReduxStore","createStore","applyMiddleware","counter$","BehaviorSubject","observableOnlyChanged","pipe","distinctUntilChanged","useSubscribe","observable$","useState","value","update","useEffect","subscribeValue","subscribe","unsubscribe","next","x","console","log","error","err","complete","UserCount","useDispatch","testingCounter","useSelector","counterValue","onClick","e","App","className","observable","init","setInterval","Math","round","random","setTimeout","BaseActionHandler","this","UserCountActionHandler","dispatch","actions","actionHandler","bindActions","UserCountDataSource","onUserCountChanged","createActionHandler","CounterActionHandler","SimplyCounter","CounterDataSources","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c90bf1f.chunk.js","sourcesContent":["export const USER_COUNT_CHANGED = 'USER_COUNT_CHANGED';\r\nexport const COUNTING = 'COUNTING';","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nconst initialState = {\n    userCount: null,\n    counter: 0\n};\n\nexport function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case USER_COUNT_CHANGED:\n            return { ...state, userCount: payload };\n        case COUNTING:\n            return { ...state, counter: state.counter + 1 }\n        default:\n            return state;\n    }\n}","import { combineEpics } from 'redux-observable';\r\n\r\nexport const rootEpic = combineEpics();","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nexport function userCountChanged(count) {\n    return { type: USER_COUNT_CHANGED, payload: count };\n}\n\nexport function counter(count) {\n    return { type: COUNTING, payload: count }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer';\nimport { rootEpics } from './rootEpics';\nimport * as actions from './actions';\n\nconst epicMiddleware = createEpicMiddleware();\nlet store = null;\n\nfunction _createStore() {\n    return createStore(\n        rootReducer,\n        applyMiddleware(epicMiddleware)\n    );\n}\n\nexport function getReduxStore() {\n    return store || (store = _createStore());\n}\n\nexport {\n    actions\n};","import { useState, useEffect } from 'react';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\n\r\nconst counter$ = new BehaviorSubject(0);\r\nconst observableOnlyChanged = counter$.pipe(distinctUntilChanged());\r\n\r\nfunction useSubscribe(observable$) {\r\n    const [value, update] = useState();\r\n\r\n    useEffect(() => {\r\n        const subscribeValue = observable$.subscribe(update)\r\n        return () => subscribeValue.unsubscribe();\r\n    }, [observable$]);\r\n\r\n    return value;\r\n}\r\n\r\ncounter$.subscribe({\r\n    next: x => console.log('got value ' + x),\r\n    error: err => console.error('something wrong occurred: ' + err),\r\n    complete: () => console.log('done'),\r\n});\r\n\r\nexport {\r\n    counter$,\r\n    useSubscribe,\r\n    observableOnlyChanged as CounterDataSources\r\n};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from '../store';\nimport { useSubscribe, counter$ } from '../services/simply-counter';\n\nfunction UserCount() {\n    const dispatch = useDispatch();\n    const testingCounter = useSelector(state => ({\n        userCount: state.userCount,\n        counter: state.counter\n    }));\n    const counterValue = useSubscribe(counter$);\n\n    function counterHandler() {\n        // dispatch(actions.counter())\n        const rxjsCounter = counter$.next(counterValue + 1)\n    }\n\n    return (\n        <div>\n            <button onClick={e => counterHandler(e)}>Kliknij mnie!</button>\n            <div>\n                Obecnie mamy tylu uzytkownikow: {testingCounter.userCount}.\n            </div>\n            <div>\n                Dane z rxjs: {counterValue}\n            </div>\n            <div>\n                Dane z redux: {testingCounter.counter}\n            </div>\n        </div>\n    )\n}\n\nexport default UserCount;","import React from 'react';\nimport UserCount from './app/UserCount';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserCount />\n    </div>\n  );\n}\n\nexport default App;","import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nconst observable = new BehaviorSubject(null);\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\n\nexport function init() {\n    console.log('service init');\n    setInterval(() => {\n        observable.next(Math.round(Math.random() * 20));\n    }, 1000);\n    setTimeout(() => {\n        observable.complete();\n    }, 10000)\n    // socket.on('user count changed', count => observable.next(count));\n}\n\nobservable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n});\n\nexport { observableOnlyChanged as UserCountDataSource };\n","export class BaseActionHandler {\n    constructor(store) {\n        this.store = store;\n    }\n}","import { UserCount } from '../services';\nimport { actions } from '../store';\nimport { BaseActionHandler } from './_base';\n\nclass UserCountActionHandler extends BaseActionHandler {\n    /**\n     * @param {number} count \n     */\n    onUserCountChanged(count) {\n        this.store.dispatch(actions.userCountChanged(count));\n    }\n}\n\n/** @type {UserCountActionHandler} */\nlet actionHandler = null;\n\nfunction createActionHandler(store) {\n    actionHandler = new UserCountActionHandler(store);\n}\n\nfunction getActionHandler() {\n    return actionHandler;\n}\n\nfunction bindActions() {\n    UserCount.UserCountDataSource.subscribe(\n        count => getActionHandler().onUserCountChanged(count)\n    );\n}\n\nexport function init(store) {\n    console.log('hub init');\n    createActionHandler(store);\n    bindActions();\n}\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\nimport { BaseActionHandler } from './_base';\n\nexport function initHubs(store) {\n    UserCount.init(store);\n    SimplyCounter.init(store);\n}\n\nexport {\n    BaseActionHandler,\n    UserCount,\n    SimplyCounter\n};","import { SimplyCounter } from '../services';\r\nimport { actions } from '../store';\r\nimport { BaseActionHandler } from './_base';\r\n\r\nclass CounterActionHandler extends BaseActionHandler {\r\n    /**\r\n     * @param {number} count \r\n     */\r\n    onUserCountChanged(count) {\r\n        this.store.dispatch(actions.counter(count));\r\n    }\r\n}\r\n\r\n/** @type {CounterActionHandler} */\r\nlet actionHandler = null;\r\n\r\nfunction createActionHandler(store) {\r\n    actionHandler = new CounterActionHandler(store);\r\n    console.log(store)\r\n}\r\n\r\nfunction getActionHandler() {\r\n    return actionHandler;\r\n}\r\n\r\nfunction bindActions() {\r\n    SimplyCounter.CounterDataSources\r\n        .subscribe(\r\n            count => getActionHandler().onUserCountChanged()\r\n        );\r\n}\r\n\r\nexport function init(store) {\r\n    console.log('hub simply-counter init');\r\n    createActionHandler(store);\r\n    bindActions();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport { initHubs } from './hubs';\nimport { initServices } from './services';\nimport { getReduxStore } from './store';\n\ninitHubs(getReduxStore());\ninitServices();\n\nReactDOM.render(\n    (\n        <Provider store={getReduxStore()}>\n            <App />\n        </Provider>\n    ), document.getElementById('root')\n);\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\n\nexport function initServices() {\n    UserCount.init();\n    // SimplyCounter.CounterDataSources();\n}\n\nexport {\n    UserCount,\n    SimplyCounter\n};"],"sourceRoot":""}