{"version":3,"sources":["app/Home/Home.jsx","hooks/simply-counter.js","app/UserCount/UserCount.jsx","app/Navigation/Routes.jsx","app/Navigation/utils.js","app/Authentication/AuthUser.jsx","app/Navigation/RegistrationAndLogin.jsx","app/Navigation/WrapperToHamburgerMenu.jsx","app/Navigation/BrowserHistory.jsx","App.jsx","services/user-count.js","store/actionTypes.js","store/reducer.js","store/actions.js","store/index.js","hubs/_base.js","hubs/user-count.js","hubs/index.js","hubs/simply-counter.js","index.js","services/index.js"],"names":["className","counter$","BehaviorSubject","observableOnlyChanged","pipe","distinctUntilChanged","useSimplyCounter","observable$","useState","value","update","useEffect","subscribeValue","subscribe","unsubscribe","addCounterHandler","next","deleteCounterHandler","x","console","log","error","err","complete","UserCount","testingCounter","useSelector","state","userCount","counter","onClick","e","exact","path","component","Home","navbarRoutes","id","label","this","authenticated","cb","props","Auth","login","history","push","isOpen","menuClicked","width","height","strokeWidth","rotate","color","borderRadius","animationDuration","RegistrationAndLogin","createBrowserHistory","App","isActiveMenu","setActiveMenu","active","nav","tagLine","companyName","closeMenu","WrapperToHamburgerMenu","Routes","observable","init","setInterval","Math","round","random","setTimeout","USER_COUNT_CHANGED","COUNT","initialState","rootReducer","type","payload","userCountChanged","count","onCountWithRxJS","epicMiddleware","createEpicMiddleware","store","getReduxStore","createStore","applyMiddleware","BaseActionHandler","UserCountActionHandler","dispatch","actions","actionHandler","bindActions","UserCountDataSource","onUserCountChanged","createActionHandler","CounterActionHandler","SimplyCounter","CounterDataSources","onCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c83fcbc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default () => (\r\n  <div className=\"home-page-container\">\r\n        <h1 className=\"h1-home-page\">\r\n            Welcome To Home Page\r\n        </h1>\r\n  </div>\r\n);\r\n","//@ts-check\r\nimport { useState, useEffect } from 'react';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nconst counter$ = new BehaviorSubject(0);\r\n\r\nconst observableOnlyChanged = counter$.pipe(distinctUntilChanged());\r\n\r\nfunction useSimplyCounter(observable$) {\r\n\r\n    const [value, update] = useState();\r\n\r\n    useEffect(() => {\r\n        const subscribeValue = observable$.subscribe(update)\r\n        return () => subscribeValue.unsubscribe();\r\n    }, [observable$]);\r\n\r\n\r\n    function addCounterHandler() {\r\n        const addCounter = counter$.next(value + 1)\r\n    }\r\n\r\n    function deleteCounterHandler() {\r\n        const deleteCounter = counter$.next(value - 1)\r\n    }\r\n\r\n    return {\r\n        /**\r\n        * @type function\r\n        */\r\n        addCounterHandler,\r\n        /**\r\n        * @type function\r\n        */\r\n        deleteCounterHandler,\r\n        /**\r\n        * @type {{value: number}}\r\n        */\r\n        value\r\n    };\r\n}\r\n\r\ncounter$.subscribe({\r\n    next: x => console.log('got value ' + x),\r\n    error: err => console.error('something wrong occurred: ' + err),\r\n    complete: () => console.log('done'),\r\n});\r\n\r\nexport {\r\n    counter$,\r\n    useSimplyCounter,\r\n    observableOnlyChanged as CounterDataSources\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useSimplyCounter, counter$ } from '../../hooks/simply-counter';\r\nimport '../../styles/app.scss';\r\n\r\nfunction UserCount() {\r\n    const testingCounter = useSelector(state => ({\r\n        userCount: state.userCount,\r\n        counter: state.counter\r\n    }));\r\n\r\n    const {\r\n        addCounterHandler,\r\n        deleteCounterHandler,\r\n        value\r\n    } = useSimplyCounter(counter$);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container-box\">\r\n                <div className=\"container-buttons\">\r\n                    <button\r\n                        className=\"button-counter btn btn-lft\"\r\n                        onClick={e => addCounterHandler(e)}\r\n                    >\r\n                        +\r\n                    </button>\r\n                    <button\r\n                        className=\"button-counter btn btn-rgt\"\r\n                        onClick={e => deleteCounterHandler(e)}\r\n                    >\r\n                        -\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    Current user's: {testingCounter.userCount}.\r\n                </div>\r\n                <div>\r\n                    Date to rxjs: {value}\r\n                </div>\r\n                <div>\r\n                    Date to redux from rxjs: {testingCounter.counter}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCount;","import React from 'react';\r\nimport {\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\nimport Home from '../Home/Home';\r\nimport UserCount from '../UserCount/UserCount';\r\n\r\nconst exactPathToHome = '/';\r\nconst pathToHome = '/home';\r\nconst pathToCount = '/count';\r\n\r\nexport default () => {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route exact path={exactPathToHome} component={Home} />\r\n          <Route path={pathToHome} component={Home} />\r\n          <Route\r\n            path={pathToCount}\r\n            component={UserCount}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    );\r\n}\r\n","export const navbarRoutes = [\r\n  {\r\n    id: 'home',\r\n    label: 'Home',\r\n    path: '/home'\r\n  },\r\n  {\r\n    id: 'userCount',\r\n    label: 'Count',\r\n    path: '/count'\r\n  },\r\n];\r\n","class Auth {\r\n  constructor() {\r\n    this.authenticated = false;\r\n  }\r\n  login(cb) {\r\n    this.authenticated = true;\r\n    cb();\r\n  }\r\n\r\n  logut(cb) {\r\n    this.authenticated = false;\r\n    cb();\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return this.authenticated;\r\n  }\r\n}\r\n\r\nexport default new Auth();","import React from 'react';\r\nimport Auth from '../Authentication/AuthUser';\r\n\r\nexport default (props) => (\r\n    <div>\r\n        <button\r\n            onClick={\r\n                () => {\r\n                   Auth.login(() => {\r\n                     props.history.push('#/count');\r\n                   }); \r\n                }\r\n            }\r\n        >Login</button>\r\n        <button>Register</button>\r\n    </div>\r\n)","import React from 'react';\r\nimport HamburgerMenu from 'react-hamburger-menu';\r\nimport RegistrationAndLoginForm from './RegistrationAndLogin';\r\n\r\nexport default ({ isOpen, menuClicked }) => (\r\n  <div className=\"wrapper-to-hamburger-menu\">\r\n    <HamburgerMenu\r\n      isOpen={isOpen}\r\n      menuClicked={menuClicked}\r\n      width={32}\r\n      height={24}\r\n      strokeWidth={4}\r\n      rotate={0}\r\n      color=\"black\"\r\n      borderRadius={0}\r\n      animationDuration={0.2}\r\n    />\r\n    <RegistrationAndLoginForm/>\r\n  </div>\r\n);\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import React, { useState } from 'react';\r\nimport Routes from './app/Navigation/Routes';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AtmosphereMenu from 'react-atmosphere-menu';\r\nimport { navbarRoutes } from './app/Navigation/utils';\r\nimport WrapperToHamburgerMenu from './app/Navigation/WrapperToHamburgerMenu';\r\nimport history from './app/Navigation/BrowserHistory';\r\n\r\nfunction App() {\r\n  const [isActiveMenu, setActiveMenu] = useState(false);\r\n  const handlerToEnableAndDisableMenu = () =>{\r\n    setActiveMenu(!isActiveMenu);\r\n  }    \r\n     \r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter history={history}>\r\n        <AtmosphereMenu\r\n          active={isActiveMenu}\r\n          nav={navbarRoutes}\r\n          tagLine={'Made by'}\r\n          companyName={'SeN'}\r\n          closeMenu={handlerToEnableAndDisableMenu}\r\n        >\r\n          <WrapperToHamburgerMenu\r\n            isOpen={isActiveMenu}\r\n            menuClicked={() => setActiveMenu(!isActiveMenu)}\r\n          />\r\n          <Routes />\r\n        </AtmosphereMenu>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nconst observable = new BehaviorSubject(null);\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\n\nexport function init() {\n    setInterval(() => {\n        observable.next(Math.round(Math.random() * 20));\n    }, 1000);\n    setTimeout(() => {\n        observable.complete();\n    }, 10000)\n    // socket.on('user count changed', count => observable.next(count));\n}\n\nobservable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n});\n\nexport { observableOnlyChanged as UserCountDataSource };\n","export const USER_COUNT_CHANGED = 'USER_COUNT_CHANGED';\r\nexport const COUNT = 'COUNT';","import {\n    USER_COUNT_CHANGED,\n    COUNT\n} from './actionTypes';\n\nconst initialState = {\n    userCount: null,\n    counter: 0\n};\n\nexport function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case USER_COUNT_CHANGED:\n            return { ...state, userCount: payload };\n        case COUNT:\n            return { ...state, counter: payload }\n        default:\n            return state;\n    }\n}","import {\n    USER_COUNT_CHANGED,\n    COUNT\n} from './actionTypes';\n\nexport function userCountChanged(count) {\n    return { type: USER_COUNT_CHANGED, payload: count };\n}\n\nexport function onCountWithRxJS(count) {\n    return { type: COUNT, payload: count }\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducer';\r\nimport * as actions from './actions';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nlet store = null;\r\n\r\nfunction _createStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(epicMiddleware)\r\n    );\r\n}\r\n\r\nexport function getReduxStore() {\r\n    return store || (store = _createStore());\r\n}\r\n\r\nexport {\r\n    actions\r\n};","export class BaseActionHandler {\n    constructor(store) {\n        this.store = store;\n    }\n}","import { UserCount } from '../services';\nimport { actions } from '../store';\nimport { BaseActionHandler } from './_base';\n\nclass UserCountActionHandler extends BaseActionHandler {\n    /**\n     * @param {number} count \n     */\n    onUserCountChanged(count) {\n        this.store.dispatch(actions.userCountChanged(count));\n    }\n}\n\n/** @type {UserCountActionHandler} */\nlet actionHandler = null;\n\nfunction createActionHandler(store) {\n    actionHandler = new UserCountActionHandler(store);\n}\n\nfunction getActionHandler() {\n    return actionHandler;\n}\n\nfunction bindActions() {\n    UserCount.UserCountDataSource\n        .subscribe(\n            count => getActionHandler().onUserCountChanged(count)\n        );\n}\n\nexport function init(store) {\n    createActionHandler(store);\n    bindActions();\n}\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\nimport { BaseActionHandler } from './_base';\n\nexport function initHubs(store) {\n    UserCount.init(store);\n    SimplyCounter.init(store);\n}\n\nexport {\n    BaseActionHandler,\n    UserCount,\n    SimplyCounter\n};","import { SimplyCounter } from '../hooks';\r\nimport { actions } from '../store';\r\nimport { BaseActionHandler } from './_base';\r\n\r\nclass CounterActionHandler extends BaseActionHandler {\r\n    /**\r\n     * @param {number} count \r\n     */\r\n    onCount(count) {\r\n        this.store.dispatch(actions.onCountWithRxJS(count));\r\n    }\r\n}\r\n\r\n/** @type {CounterActionHandler} */\r\nlet actionHandler = null;\r\n\r\nfunction createActionHandler(store) {\r\n    actionHandler = new CounterActionHandler(store);\r\n}\r\n\r\nfunction getActionHandler() {\r\n    return actionHandler;\r\n}\r\n\r\nfunction bindActions() {\r\n    SimplyCounter.CounterDataSources\r\n        .subscribe(\r\n            count => getActionHandler().onCount(count)\r\n        );\r\n}\r\n\r\nexport function init(store) {\r\n    createActionHandler(store);\r\n    bindActions();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport { initHubs } from './hubs';\nimport { initServices } from './services';\nimport { getReduxStore } from './store';\n\ninitHubs(getReduxStore());\ninitServices();\n\nReactDOM.render(\n    (\n        <Provider store={getReduxStore()}>\n            <App />\n        </Provider>\n    ), document.getElementById('root')\n);\n","import * as UserCount from './user-count';\n\nexport function initServices() {\n    UserCount.init();\n}\n\nexport {\n    UserCount\n};"],"sourceRoot":""}