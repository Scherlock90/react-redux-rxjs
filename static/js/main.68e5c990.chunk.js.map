{"version":3,"sources":["store/actionTypes.js","store/reducer.js","store/rootEpics.js","store/actions.js","store/index.js","hooks/simply-counter.js","app/UserCount.js","App.js","services/user-count.js","hubs/_base.js","hubs/user-count.js","hubs/index.js","hubs/simply-counter.js","index.js","services/index.js"],"names":["USER_COUNT_CHANGED","COUNTING","initialState","userCount","counter","rootReducer","state","type","payload","combineEpics","userCountChanged","count","epicMiddleware","createEpicMiddleware","store","getReduxStore","createStore","applyMiddleware","counter$","BehaviorSubject","observableOnlyChanged","pipe","distinctUntilChanged","useSubscribe","observable$","useState","value","update","useEffect","subscribeValue","subscribe","unsubscribe","next","x","console","log","error","err","complete","UserCount","testingCounter","useSelector","counterValue","onClick","e","App","className","observable","init","setInterval","Math","round","random","setTimeout","BaseActionHandler","this","UserCountActionHandler","dispatch","actions","actionHandler","bindActions","UserCountDataSource","onUserCountChanged","createActionHandler","CounterActionHandler","SimplyCounter","CounterDataSources","ReactDOM","render","document","getElementById"],"mappings":"olBAAaA,EAAqB,qBACrBC,EAAW,W,mjBCIxB,IAAMC,EAAe,CACjBC,UAAW,KACXC,QAAS,GAGN,SAASC,IAAsD,IAA1CC,EAAyC,uDAAjCJ,EAAiC,yCAAjBK,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACtD,OAAQD,GACJ,KAAKP,EACD,OAAO,EAAP,GAAYM,EAAZ,CAAmBH,UAAWK,IAClC,KAAKP,EACD,OAAO,EAAP,GAAYK,EAAZ,CAAmBF,QAASE,EAAMF,QAAU,IAChD,QACI,OAAOE,G,YCfKG,cCGjB,SAASC,EAAiBC,GAC7B,MAAO,CAAEJ,KAAMP,EAAoBQ,QAASG,GAGzC,SAASP,EAAQO,GACpB,MAAO,CAAEJ,KAAMN,EAAUO,QAASG,GCHtC,IAAMC,EAAiBC,cACnBC,EAAQ,KASL,SAASC,IACZ,OAAOD,IAAUA,EAPVE,YACHX,EACAY,YAAgBL,K,4BCRlBM,EAAW,IAAIC,IAAgB,GAC/BC,EAAwBF,EAASG,KAAKC,eAE5C,SAASC,EAAaC,GAAc,IAAD,EACPC,qBADO,mBACxBC,EADwB,KACjBC,EADiB,KAQ/B,OALAC,oBAAU,WACN,IAAMC,EAAiBL,EAAYM,UAAUH,GAC7C,OAAO,kBAAME,EAAeE,gBAC7B,CAACP,IAEGE,EAGXR,EAASY,UAAU,CACfE,KAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,aAAeF,IACtCG,MAAO,SAAAC,GAAG,OAAIH,QAAQE,MAAM,6BAA+BC,IAC3DC,SAAU,kBAAMJ,QAAQC,IAAI,WCUjBI,MA3Bf,WACI,IAAMC,EAAiBC,YAAY,SAAAnC,GAAK,MAAK,CACzCH,UAAWG,EAAMH,UACjBC,QAASE,EAAMF,WAEbsC,EAAenB,EAAaL,GAMlC,OACI,6BACI,4BAAQyB,QAAS,SAAAC,GALD1B,EAASc,KAAKU,EAAe,KAK7C,YACA,gDACqBF,EAAerC,UADpC,KAGA,8CACmBuC,GAEnB,oDACyBF,EAAepC,WCfrCyC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,Q,wCCHAC,EAAa,IAAI5B,IAAgB,MACjCC,EAAwB2B,EAAW1B,KAAKC,eAEvC,SAAS0B,IACZC,YAAY,WACRF,EAAWf,KAAKkB,KAAKC,MAAsB,GAAhBD,KAAKE,YACjC,KACHC,WAAW,WACPN,EAAWT,YACZ,KAIPS,EAAWjB,UAAU,CACjBE,KAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAI,aAAeF,IACtCG,MAAO,SAAAC,GAAG,OAAIH,QAAQE,MAAM,6BAA+BC,IAC3DC,SAAU,kBAAMJ,QAAQC,IAAI,WCnBzB,IAAMmB,EACT,WAAYxC,GAAQ,oBAChByC,KAAKzC,MAAQA,GCEf0C,E,2LAIiB7C,GACf4C,KAAKzC,MAAM2C,SAASC,EAAQhD,iBAAiBC,Q,GALhB2C,GAUjCK,EAAgB,KAUpB,SAASC,IACLrB,EAAUsB,oBACL/B,UACG,SAAAnB,GAAK,OANNgD,EAM6BG,mBAAmBnD,KAIpD,SAASqC,EAAKlC,IAfrB,SAA6BA,GACzB6C,EAAgB,IAAIH,EAAuB1C,GAe3CiD,CAAoBjD,GACpB8C,I,IC7BqB9C,ECAnBkD,E,2LAIiBrD,GACf4C,KAAKzC,MAAM2C,SAASC,EAAQtD,QAAQO,Q,GALT2C,GAU/BK,EAAgB,KAUpB,SAASC,IACLK,EAAcC,mBACTpC,UACG,SAAAnB,GAAK,OANNgD,EAM6BG,mBAAmBnD,KAIpD,SAASqC,EAAKlC,IAfrB,SAA6BA,GACzB6C,EAAgB,IAAIK,EAAqBlD,GAezCiD,CAAoBjD,GACpB8C,ID5BArB,EADqBzB,EEKhBC,KFHLkD,EAAmBnD,GGHnByB,IDSJ4B,IAASC,OAED,kBAAC,IAAD,CAAUtD,MAAOC,KACb,kBAAC,EAAD,OAELsD,SAASC,eAAe,W","file":"static/js/main.68e5c990.chunk.js","sourcesContent":["export const USER_COUNT_CHANGED = 'USER_COUNT_CHANGED';\r\nexport const COUNTING = 'COUNTING';","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nconst initialState = {\n    userCount: null,\n    counter: 0\n};\n\nexport function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case USER_COUNT_CHANGED:\n            return { ...state, userCount: payload };\n        case COUNTING:\n            return { ...state, counter: state.counter + 1 }\n        default:\n            return state;\n    }\n}","import { combineEpics } from 'redux-observable';\r\n\r\nexport const rootEpic = combineEpics();","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nexport function userCountChanged(count) {\n    return { type: USER_COUNT_CHANGED, payload: count };\n}\n\nexport function counter(count) {\n    return { type: COUNTING, payload: count }\n}\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducer';\r\nimport { rootEpics } from './rootEpics';\r\nimport * as actions from './actions';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nlet store = null;\r\n\r\nfunction _createStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(epicMiddleware)\r\n    );\r\n}\r\n\r\nexport function getReduxStore() {\r\n    return store || (store = _createStore());\r\n}\r\n\r\nexport {\r\n    actions\r\n};","import { useState, useEffect } from 'react';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\n\r\nconst counter$ = new BehaviorSubject(0);\r\nconst observableOnlyChanged = counter$.pipe(distinctUntilChanged());\r\n\r\nfunction useSubscribe(observable$) {\r\n    const [value, update] = useState();\r\n\r\n    useEffect(() => {\r\n        const subscribeValue = observable$.subscribe(update)\r\n        return () => subscribeValue.unsubscribe();\r\n    }, [observable$]);\r\n\r\n    return value;\r\n}\r\n\r\ncounter$.subscribe({\r\n    next: x => console.log('got value ' + x),\r\n    error: err => console.error('something wrong occurred: ' + err),\r\n    complete: () => console.log('done'),\r\n});\r\n\r\nexport {\r\n    counter$,\r\n    useSubscribe,\r\n    observableOnlyChanged as CounterDataSources\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../store';\r\nimport { useSubscribe, counter$ } from '../hooks/simply-counter';\r\n\r\nfunction UserCount() {\r\n    const testingCounter = useSelector(state => ({\r\n        userCount: state.userCount,\r\n        counter: state.counter\r\n    }));\r\n    const counterValue = useSubscribe(counter$);\r\n\r\n    function counterHandler() {\r\n        const rxjsCounter = counter$.next(counterValue + 1)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={e => counterHandler(e)}>Clik Me!</button>\r\n            <div>\r\n                Currnet user's: {testingCounter.userCount}.\r\n            </div>\r\n            <div>\r\n                Date to rxjs: {counterValue}\r\n            </div>\r\n            <div>\r\n                DAte to redux-rxjs: {testingCounter.counter}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCount;","import React from 'react';\nimport UserCount from './app/UserCount';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserCount />\n    </div>\n  );\n}\n\nexport default App;","import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nconst observable = new BehaviorSubject(null);\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\n\nexport function init() {\n    setInterval(() => {\n        observable.next(Math.round(Math.random() * 20));\n    }, 1000);\n    setTimeout(() => {\n        observable.complete();\n    }, 10000)\n    // socket.on('user count changed', count => observable.next(count));\n}\n\nobservable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n});\n\nexport { observableOnlyChanged as UserCountDataSource };\n","export class BaseActionHandler {\n    constructor(store) {\n        this.store = store;\n    }\n}","import { UserCount } from '../services';\nimport { actions } from '../store';\nimport { BaseActionHandler } from './_base';\n\nclass UserCountActionHandler extends BaseActionHandler {\n    /**\n     * @param {number} count \n     */\n    onUserCountChanged(count) {\n        this.store.dispatch(actions.userCountChanged(count));\n    }\n}\n\n/** @type {UserCountActionHandler} */\nlet actionHandler = null;\n\nfunction createActionHandler(store) {\n    actionHandler = new UserCountActionHandler(store);\n}\n\nfunction getActionHandler() {\n    return actionHandler;\n}\n\nfunction bindActions() {\n    UserCount.UserCountDataSource\n        .subscribe(\n            count => getActionHandler().onUserCountChanged(count)\n        );\n}\n\nexport function init(store) {\n    createActionHandler(store);\n    bindActions();\n}\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\nimport { BaseActionHandler } from './_base';\n\nexport function initHubs(store) {\n    UserCount.init(store);\n    SimplyCounter.init(store);\n}\n\nexport {\n    BaseActionHandler,\n    UserCount,\n    SimplyCounter\n};","import { SimplyCounter } from '../hooks';\r\nimport { actions } from '../store';\r\nimport { BaseActionHandler } from './_base';\r\n\r\nclass CounterActionHandler extends BaseActionHandler {\r\n    /**\r\n     * @param {number} count \r\n     */\r\n    onUserCountChanged(count) {\r\n        this.store.dispatch(actions.counter(count));\r\n    }\r\n}\r\n\r\n/** @type {CounterActionHandler} */\r\nlet actionHandler = null;\r\n\r\nfunction createActionHandler(store) {\r\n    actionHandler = new CounterActionHandler(store);\r\n}\r\n\r\nfunction getActionHandler() {\r\n    return actionHandler;\r\n}\r\n\r\nfunction bindActions() {\r\n    SimplyCounter.CounterDataSources\r\n        .subscribe(\r\n            count => getActionHandler().onUserCountChanged(count)\r\n        );\r\n}\r\n\r\nexport function init(store) {\r\n    createActionHandler(store);\r\n    bindActions();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport { initHubs } from './hubs';\nimport { initServices } from './services';\nimport { getReduxStore } from './store';\n\ninitHubs(getReduxStore());\ninitServices();\n\nReactDOM.render(\n    (\n        <Provider store={getReduxStore()}>\n            <App />\n        </Provider>\n    ), document.getElementById('root')\n);\n","import * as UserCount from './user-count';\n\nexport function initServices() {\n    UserCount.init();\n}\n\nexport {\n    UserCount\n};"],"sourceRoot":""}