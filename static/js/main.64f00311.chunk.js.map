{"version":3,"sources":["store/actionTypes.js","store/reducer.js","store/actions.js","store/index.js","app/UserCount.js","App.js","services/user-count.js","services/simply-counter.js","hubs/_base.js","hubs/user-count.js","hubs/index.js","index.js","services/index.js"],"names":["USER_COUNT_CHANGED","COUNTING","initialState","userCount","counter","rootReducer","state","type","payload","userCountChanged","count","store","getReduxStore","createStore","applyMiddleware","thunk","counter$","BehaviorSubject","UserCount","dispatch","useDispatch","testingCounter","useSelector","counterValue","observable$","useState","value","update","useEffect","subscribeValue","subscribe","unsubscribe","useSubscribe","onClick","e","actions","next","App","className","observable","observableOnlyChanged","pipe","distinctUntilChanged","init","console","log","setInterval","Math","round","random","setTimeout","complete","x","error","err","BaseActionHandler","this","UserCountActionHandler","actionHandler","bindActions","UserCountDataSource","onUserCountChanged","createActionHandler","SimplyCounter","ReactDOM","render","document","getElementById"],"mappings":"6iBAAaA,EAAqB,qBACrBC,EAAW,W,mjBCIxB,IAAMC,EAAe,CACjBC,UAAW,KACXC,QAAS,GAGN,SAASC,IAAsD,IAA1CC,EAAyC,uDAAjCJ,EAAiC,yCAAjBK,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACtD,OAAQD,GACJ,KAAKP,EACD,OAAO,EAAP,GAAYM,EAAZ,CAAmBH,UAAWK,IAClC,KAAKP,EACD,OAAO,EAAP,GAAYK,EAAZ,CAAmBF,QAASE,EAAMF,QAAU,IAChD,QACI,OAAOE,GCZZ,SAASG,EAAiBC,GAC7B,MAAO,CAAEH,KAAMP,EAAoBQ,QAASE,GAGzC,SAASN,EAAQM,GACpB,MAAO,CAAEH,KAAMN,EAAUO,QAASE,GCLtC,IAAIC,EAAQ,KASL,SAASC,IACZ,OAAOD,IAAUA,EAPVE,YACHR,EACAS,YAAgBC,OCLxB,IAAMC,EAAW,IAAIC,IAAgB,GA2CtBC,MA7Bf,WACI,IAAMC,EAAWC,cACXC,EAAiBC,YAAY,SAAAhB,GAAK,MAAK,CACzCH,UAAWG,EAAMH,UACjBC,QAASE,EAAMF,WAEbmB,EAlBV,SAAsBC,GAAc,IAAD,EACPC,qBADO,mBACxBC,EADwB,KACjBC,EADiB,KAQ/B,OALAC,oBAAU,WACN,IAAMC,EAAiBL,EAAYM,UAAUH,GAC7C,OAAO,kBAAME,EAAeE,gBAC7B,CAACP,IAEGE,EAUcM,CAAahB,GAOlC,OACI,6BACI,4BAAQiB,QAAS,SAAAC,GAAC,OANtBf,EAASgB,EAAQ/B,gBACGY,EAASoB,KAAKb,EAAe,KAK7C,iBACA,gEACqCF,EAAelB,UADpD,KAGA,6CACkBoB,GAElB,8CACmBF,EAAejB,WC/B/BiC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,Q,+CCHAC,EAAa,IAAItB,IAAgB,MACjCuB,EAAwBD,EAAWE,KAAKC,eAEvC,SAASC,IACZC,QAAQC,IAAI,gBACZC,YAAY,WACRP,EAAWH,KAAKW,KAAKC,MAAsB,GAAhBD,KAAKE,YACjC,KACHC,WAAW,WACPX,EAAWY,YACZ,KAIPZ,EAAWT,UAAU,CACjBM,KAAM,SAAAgB,GAAC,OAAIR,QAAQC,IAAI,aAAeO,IACtCC,MAAO,SAAAC,GAAG,OAAIV,QAAQS,MAAM,6BAA+BC,IAC3DH,SAAU,kBAAMP,QAAQC,IAAI,WCjBhC,IAAMN,EAAa,IAAItB,IAAgB,MACjCuB,EAAwBD,EAAWE,KAAKC,eAEvC,SAASC,IACZC,QAAQC,IAAI,gBACZC,YAAY,WACRP,EAAWH,KAAKW,KAAKC,MAAsB,IAAhBD,KAAKE,YACjC,KACHC,WAAW,WACPX,EAAWY,YACZ,KAIPZ,EAAWT,UAAU,CACjBM,KAAM,SAAAgB,GAAC,OAAIR,QAAQC,IAAI,aAAeO,IACtCC,MAAO,SAAAC,GAAG,OAAIV,QAAQS,MAAM,6BAA+BC,IAC3DH,SAAU,kBAAMP,QAAQC,IAAI,WCpBzB,IAAMU,EACT,WAAY5C,GAAQ,oBAChB6C,KAAK7C,MAAQA,GCEf8C,E,2LAIiB/C,GACf8C,KAAK7C,MAAMQ,SAASgB,EAAQ1B,iBAAiBC,Q,GALhB6C,GAUjCG,EAAgB,KAUpB,SAASC,IACLzC,EAAU0C,oBAAoB9B,UAC1B,SAAApB,GAAK,OALFgD,EAKyBG,mBAAmBnD,KAIhD,SAASiC,EAAKhC,GACjBiC,QAAQC,IAAI,YAfhB,SAA6BlC,GACzB+C,EAAgB,IAAID,EAAuB9C,GAe3CmD,CAAoBnD,GACpBgD,IC5BAzC,ECIKN,KCLLM,IACA6C,IDOJC,IAASC,OAED,kBAAC,IAAD,CAAUtD,MAAOC,KACb,kBAAC,EAAD,OAELsD,SAASC,eAAe,W","file":"static/js/main.64f00311.chunk.js","sourcesContent":["export const USER_COUNT_CHANGED = 'USER_COUNT_CHANGED';\r\nexport const COUNTING = 'COUNTING';","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nconst initialState = {\n    userCount: null,\n    counter: 0\n};\n\nexport function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case USER_COUNT_CHANGED:\n            return { ...state, userCount: payload };\n        case COUNTING:\n            return { ...state, counter: state.counter + 1 }\n        default:\n            return state;\n    }\n}","import {\n    USER_COUNT_CHANGED,\n    COUNTING\n} from './actionTypes';\n\nexport function userCountChanged(count) {\n    return { type: USER_COUNT_CHANGED, payload: count };\n}\n\nexport function counter(count) {\n    return { type: COUNTING, payload: count }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducer';\nimport * as actions from './actions';\n\nlet store = null;\n\nfunction _createStore() {\n    return createStore(\n        rootReducer,\n        applyMiddleware(thunk)\n    );\n}\n\nexport function getReduxStore() {\n    return store || (store = _createStore());\n}\n\nexport {\n    actions\n};","import React, { useState, useEffect } from 'react';\nimport { BehaviorSubject } from 'rxjs';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actions } from '../store';\n\nconst counter$ = new BehaviorSubject(0);\n\nfunction useSubscribe(observable$) {\n    const [value, update] = useState();\n\n    useEffect(() => {\n        const subscribeValue = observable$.subscribe(update)\n        return () => subscribeValue.unsubscribe();\n    }, [observable$]);\n\n    return value;\n}\n\n\nfunction UserCount() {\n    const dispatch = useDispatch();\n    const testingCounter = useSelector(state => ({\n        userCount: state.userCount,\n        counter: state.counter\n    }));\n    const counterValue = useSubscribe(counter$);\n\n    function counterHandler() {\n        dispatch(actions.counter())\n        const rxjsCounter = counter$.next(counterValue + 1)\n    }\n\n    return (\n        <div>\n            <button onClick={e => counterHandler(e)}>Kliknij mnie!</button>\n            <div>\n                Obecnie mamy tylu uzytkownikow: {testingCounter.userCount}.\n            </div>\n            <div>\n                Dane z rxjs: {counterValue}\n            </div>\n            <div>\n                Dane z redux: {testingCounter.counter}\n            </div>\n        </div>\n    )\n}\n\nexport default UserCount;","import React from 'react';\nimport UserCount from './app/UserCount';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserCount />\n    </div>\n  );\n}\n\nexport default App;","import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nconst observable = new BehaviorSubject(null);\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\n\nexport function init() {\n    console.log('service init');\n    setInterval(() => {\n        observable.next(Math.round(Math.random() * 20));\n    }, 1000);\n    setTimeout(() => {\n        observable.complete();\n    }, 10000)\n    // socket.on('user count changed', count => observable.next(count));\n}\n\nobservable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n});\n\nexport { observableOnlyChanged as UserCountDataSource };\n","import { BehaviorSubject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nconst observable = new BehaviorSubject(null);\r\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\r\n\r\nexport function init() {\r\n    console.log('service init');\r\n    setInterval(() => {\r\n        observable.next(Math.round(Math.random() * 200));\r\n    }, 1000);\r\n    setTimeout(() => {\r\n        observable.complete();\r\n    }, 10000)\r\n    // socket.on('user count changed', count => observable.next(count));\r\n}\r\n\r\nobservable.subscribe({\r\n    next: x => console.log('got value ' + x),\r\n    error: err => console.error('something wrong occurred: ' + err),\r\n    complete: () => console.log('done'),\r\n});\r\n\r\nexport { observableOnlyChanged as CounterDataSources };\r\n","export class BaseActionHandler {\n    constructor(store) {\n        this.store = store;\n    }\n}","import { UserCount } from '../services';\nimport { actions } from '../store';\nimport { BaseActionHandler } from './_base';\n\nclass UserCountActionHandler extends BaseActionHandler {\n    /**\n     * @param {number} count \n     */\n    onUserCountChanged(count) {\n        this.store.dispatch(actions.userCountChanged(count));\n    }\n}\n\n/** @type {UserCountActionHandler} */\nlet actionHandler = null;\n\nfunction createActionHandler(store) {\n    actionHandler = new UserCountActionHandler(store);\n}\n\nfunction getActionHandler() {\n    return actionHandler;\n}\n\nfunction bindActions() {\n    UserCount.UserCountDataSource.subscribe(\n        count => getActionHandler().onUserCountChanged(count)\n    );\n}\n\nexport function init(store) {\n    console.log('hub init');\n    createActionHandler(store);\n    bindActions();\n}\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\nimport { BaseActionHandler } from './_base';\n\nexport function initHubs(store) {\n    UserCount.init(store);\n    // SimplyCounter.init(store);\n}\n\nexport {\n    BaseActionHandler,\n    UserCount,\n    SimplyCounter\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport { initHubs } from './hubs';\nimport { initServices } from './services';\nimport { getReduxStore } from './store';\n\ninitHubs(getReduxStore());\ninitServices();\n\nReactDOM.render(\n    (\n        <Provider store={getReduxStore()}>\n            <App />\n        </Provider>\n    ), document.getElementById('root')\n);\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\n\nexport function initServices() {\n    UserCount.init();\n    SimplyCounter.init();\n}\n\nexport {\n    UserCount,\n    SimplyCounter\n};"],"sourceRoot":""}