{"version":3,"sources":["hooks/simply-counter.js","app/UserCount.js","App.js","services/user-count.js","store/actionTypes.js","store/reducer.js","store/rootEpics.js","store/actions.js","store/index.js","hubs/_base.js","hubs/user-count.js","hubs/index.js","hubs/simply-counter.js","index.js","services/index.js"],"names":["counter$","BehaviorSubject","observableOnlyChanged","pipe","distinctUntilChanged","useSimplyCounter","observable$","useState","value","update","useEffect","subscribeValue","subscribe","unsubscribe","addCounterHandler","next","deleteCounterHandler","x","console","log","error","err","complete","UserCount","testingCounter","useSelector","state","userCount","counter","className","onClick","e","App","observable","init","setInterval","Math","round","random","setTimeout","USER_COUNT_CHANGED","COUNT","initialState","rootReducer","type","payload","combineEpics","userCountChanged","count","onCountWithRxJS","epicMiddleware","createEpicMiddleware","store","getReduxStore","createStore","applyMiddleware","BaseActionHandler","this","UserCountActionHandler","dispatch","actions","actionHandler","bindActions","UserCountDataSource","onUserCountChanged","createActionHandler","CounterActionHandler","SimplyCounter","CounterDataSources","onCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b941631d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\n\r\nconst counter$ = new BehaviorSubject(0);\r\nconst observableOnlyChanged = counter$.pipe(distinctUntilChanged());\r\n\r\nfunction useSimplyCounter(observable$) {\r\n    const [value, update] = useState();\r\n\r\n    useEffect(() => {\r\n        const subscribeValue = observable$.subscribe(update)\r\n        return () => subscribeValue.unsubscribe();\r\n    }, [observable$]);\r\n\r\n\r\n    function addCounterHandler() {\r\n        const addCounter = counter$.next(value + 1)\r\n    }\r\n\r\n    function deleteCounterHandler() {\r\n        const deleteCounter = counter$.next(value - 1)\r\n    }\r\n\r\n    return {\r\n        addCounterHandler,\r\n        deleteCounterHandler,\r\n        value\r\n    };\r\n}\r\n\r\ncounter$.subscribe({\r\n    next: x => console.log('got value ' + x),\r\n    error: err => console.error('something wrong occurred: ' + err),\r\n    complete: () => console.log('done'),\r\n});\r\n\r\nexport {\r\n    counter$,\r\n    useSimplyCounter,\r\n    observableOnlyChanged as CounterDataSources\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useSimplyCounter, counter$ } from '../hooks/simply-counter';\r\nimport '../styles/app.scss';\r\n\r\nfunction UserCount() {\r\n    const testingCounter = useSelector(state => ({\r\n        userCount: state.userCount,\r\n        counter: state.counter\r\n    }));\r\n\r\n    const {\r\n        addCounterHandler,\r\n        deleteCounterHandler,\r\n        value\r\n    } = useSimplyCounter(counter$);\r\n\r\n    return (\r\n        <div className=\"container-box\">\r\n            <div className=\"container-buttons\">\r\n                <button\r\n                    className=\"button-counter btn btn-lft\"\r\n                    onClick={e => addCounterHandler(e)}\r\n                >\r\n                    +\r\n                </button>\r\n                <button\r\n                    className=\"button-counter btn btn-rgt\"\r\n                    onClick={e => deleteCounterHandler(e)}\r\n                >\r\n                    -\r\n                </button>\r\n            </div>\r\n            <div>\r\n                Currnet user's: {testingCounter.userCount}.\r\n            </div>\r\n            <div>\r\n                Date to rxjs: {value}\r\n            </div>\r\n            <div>\r\n                DAte to redux from rxjs: {testingCounter.counter}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCount;","import React from 'react';\nimport UserCount from './app/UserCount';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserCount />\n    </div>\n  );\n}\n\nexport default App;","import { BehaviorSubject } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\nconst observable = new BehaviorSubject(null);\nconst observableOnlyChanged = observable.pipe(distinctUntilChanged());\n\nexport function init() {\n    setInterval(() => {\n        observable.next(Math.round(Math.random() * 20));\n    }, 1000);\n    setTimeout(() => {\n        observable.complete();\n    }, 10000)\n    // socket.on('user count changed', count => observable.next(count));\n}\n\nobservable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n});\n\nexport { observableOnlyChanged as UserCountDataSource };\n","export const USER_COUNT_CHANGED = 'USER_COUNT_CHANGED';\r\nexport const COUNT = 'COUNT';","import {\n    USER_COUNT_CHANGED,\n    COUNT\n} from './actionTypes';\n\nconst initialState = {\n    userCount: null,\n    counter: 0\n};\n\nexport function rootReducer(state = initialState, { type, payload }) {\n    switch (type) {\n        case USER_COUNT_CHANGED:\n            return { ...state, userCount: payload };\n        case COUNT:\n            return { ...state, counter: payload }\n        default:\n            return state;\n    }\n}","import { combineEpics } from 'redux-observable';\r\n\r\nexport const rootEpic = combineEpics();","import {\n    USER_COUNT_CHANGED,\n    COUNT\n} from './actionTypes';\n\nexport function userCountChanged(count) {\n    return { type: USER_COUNT_CHANGED, payload: count };\n}\n\nexport function onCountWithRxJS(count) {\n    return { type: COUNT, payload: count }\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducer';\r\nimport { rootEpics } from './rootEpics';\r\nimport * as actions from './actions';\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nlet store = null;\r\n\r\nfunction _createStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(epicMiddleware)\r\n    );\r\n}\r\n\r\nexport function getReduxStore() {\r\n    return store || (store = _createStore());\r\n}\r\n\r\nexport {\r\n    actions\r\n};","export class BaseActionHandler {\n    constructor(store) {\n        this.store = store;\n    }\n}","import { UserCount } from '../services';\nimport { actions } from '../store';\nimport { BaseActionHandler } from './_base';\n\nclass UserCountActionHandler extends BaseActionHandler {\n    /**\n     * @param {number} count \n     */\n    onUserCountChanged(count) {\n        this.store.dispatch(actions.userCountChanged(count));\n    }\n}\n\n/** @type {UserCountActionHandler} */\nlet actionHandler = null;\n\nfunction createActionHandler(store) {\n    actionHandler = new UserCountActionHandler(store);\n}\n\nfunction getActionHandler() {\n    return actionHandler;\n}\n\nfunction bindActions() {\n    UserCount.UserCountDataSource\n        .subscribe(\n            count => getActionHandler().onUserCountChanged(count)\n        );\n}\n\nexport function init(store) {\n    createActionHandler(store);\n    bindActions();\n}\n","import * as UserCount from './user-count';\nimport * as SimplyCounter from './simply-counter';\nimport { BaseActionHandler } from './_base';\n\nexport function initHubs(store) {\n    UserCount.init(store);\n    SimplyCounter.init(store);\n}\n\nexport {\n    BaseActionHandler,\n    UserCount,\n    SimplyCounter\n};","import { SimplyCounter } from '../hooks';\r\nimport { actions } from '../store';\r\nimport { BaseActionHandler } from './_base';\r\n\r\nclass CounterActionHandler extends BaseActionHandler {\r\n    /**\r\n     * @param {number} count \r\n     */\r\n    onCount(count) {\r\n        this.store.dispatch(actions.onCountWithRxJS(count));\r\n    }\r\n}\r\n\r\n/** @type {CounterActionHandler} */\r\nlet actionHandler = null;\r\n\r\nfunction createActionHandler(store) {\r\n    actionHandler = new CounterActionHandler(store);\r\n}\r\n\r\nfunction getActionHandler() {\r\n    return actionHandler;\r\n}\r\n\r\nfunction bindActions() {\r\n    SimplyCounter.CounterDataSources\r\n        .subscribe(\r\n            count => getActionHandler().onCount(count)\r\n        );\r\n}\r\n\r\nexport function init(store) {\r\n    createActionHandler(store);\r\n    bindActions();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport { initHubs } from './hubs';\nimport { initServices } from './services';\nimport { getReduxStore } from './store';\n\ninitHubs(getReduxStore());\ninitServices();\n\nReactDOM.render(\n    (\n        <Provider store={getReduxStore()}>\n            <App />\n        </Provider>\n    ), document.getElementById('root')\n);\n","import * as UserCount from './user-count';\n\nexport function initServices() {\n    UserCount.init();\n}\n\nexport {\n    UserCount\n};"],"sourceRoot":""}